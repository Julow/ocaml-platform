   
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux-build:
    strategy:
      matrix:
        platform:
          - { name: "linux/amd64", filename_suffix: "linux-amd64" }
          - { name: "linux/arm64", filename_suffix: "linux-arm64" }
        runAllTests:
          - ${{ startsWith(github.ref, 'refs/tags/') }}
        exclude:
          - platform: { name: "linux/arm64", filename_suffix: "linux-arm64" }
            runAllTests: false
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker

      - name: Build
        run: OCAMLPLATFORM_PLATFORM=${{ matrix.platform.name }} ; export OCAMLPLATFORM_PLATFORM ;./test/run_test.sh
        env:
          OCAMLPLATFORM_PLATFORM: ${{ matrix.platform.name }}

      - name: Check images
        run: docker image ls

      - name: Test install
        run: OCAMLPLATFORM_PLATFORM=${{ matrix.platform.name }} ; export OCAMLPLATFORM_PLATFORM ; ./test/run_test.sh install

      - name: Test version
        run: OCAMLPLATFORM_PLATFORM=${{ matrix.platform.name }} ; export OCAMLPLATFORM_PLATFORM ; ./test/run_test.sh version

      - name: Test odoc
        run:  OCAMLPLATFORM_PLATFORM=${{ matrix.platform.name }} ; export OCAMLPLATFORM_PLATFORM ; ./test/run_test.sh small-project install-in-small-project odoc

      - name: Test ocamlformat
        run:  OCAMLPLATFORM_PLATFORM=${{ matrix.platform.name }} ; export OCAMLPLATFORM_PLATFORM ; ./test/run_test.sh small-project install-in-small-project ocamlformat

      - name: Get executables from docker image
        run: mkdir -p release ; chmod a+rw release ; docker run --platform ${{ matrix.platform.name }} -v $PWD/release:/release ocaml-platform-build-${{ matrix.platform.name }} cp /home/opam/ocaml-platform/_build/default/src/bin/main.exe /release/ocaml-platform-${{ matrix.platform.filename_suffix }}.exe

      - name: Get the version
        id: get_version
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Create release archive
        if: startsWith(github.ref, 'refs/tags/')
        run: OCAMLPLATFORM_PLATFORM=${{ matrix.platform.name }} ; export OCAMLPLATFORM_PLATFORM ; export VERSION=${{ steps.get_version.outputs.VERSION }} ./test/run_test.sh release

      - name: Get archive from docker image
        if: startsWith(github.ref, 'refs/tags/')
        run: docker run --platform ${{ matrix.platform.name }} -v $PWD/release:/release ocaml-platform-release-${{ matrix.platform.name }} cp /home/opam/ocaml-platform/*.tar /release/

      - name: upload linux artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: release/ocaml-platform-*.exe

      - name: upload archives
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: archives
          path: release/*.tar

  mac-build:
    strategy:
      fail-fast: false

      matrix:
        os:
          - macos-latest

        ocaml-compiler:
          - 4.14.x

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use OCaml ${{ matrix.ocaml-compiler }}
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: ${{ matrix.os != 'macos-latest' }}

      - name: Install dependencies
        run: opam install --deps-only --with-test --with-doc -y .

      - name: build
        run: bash test/tests/build.sh

      - name: cp file
        run: cp _build/default/src/bin/main.exe ocaml-platform-macos.exe

      - name: Get the version
        id: get_version
        if: startsWith(github.ref, 'refs/tags/')
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: create release archive
        if: startsWith(github.ref, 'refs/tags/')
        run: export TARGETOS=macos ; export TARGETARCH=amd64 ; export VERSION=${{ steps.get_version.outputs.VERSION }}; bash test/tests/release.sh

      - name: upload mac artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: ocaml-platform-macos.exe

      - name: upload archives
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: archives
          path: ocaml-platform-macos-amd64.tar

  mac-test:
    needs: [mac-build]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries

      - name: Copy binary to path
        run: cp ocaml-platform-macos.exe /usr/local/bin/ocaml-platform; chmod a+x /usr/local/bin/ocaml-platform

      - name: Test install
        run: bash test/tests/install.sh

      - name: Test suite
        run: bash test/tests/small-project.sh ; bash test/tests/install-in-small-project.sh ; bash test/tests/odoc.sh ; bash test/tests/ocamlformat.sh ; 

small-project install-in-small-project ocamlformat
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [linux-build, mac-build, mac-test]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ocaml-platform-macos.exe
            ocaml-platform-x86_64.exe
            ocaml-platform-arm64.exe
